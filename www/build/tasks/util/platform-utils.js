/**
 * Gulp utilities for platform.
 */
const display = require("./display");
const uc = require("./unite-config");
const gulp = require("gulp");
const path = require("path");
const clientPackages = require("./client-packages");
const asyncUtil = require("./async-util");
const packageConfig = require("./package-config");

async function gatherFiles (platformName, wwwRootFolder) {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);
    const packageJson = await packageConfig.getPackageJson();

    const bundleExists = await asyncUtil.fileExists(path.join(uniteConfig.dirs.www.dist, "app-bundle.js"));
    if (buildConfiguration.bundle && !bundleExists) {
        display.error(`You have specified configuration '${buildConfiguration.name}' which is bundled,` +
            " but the dist folder contains a non bundled build.");
        process.exit(1);
    } else if (!buildConfiguration.bundle && bundleExists) {
        display.error(`You have specified configuration '${buildConfiguration.name}' which is not bundled,` +
            " but the dist folder contains a bundled build.");
        process.exit(1);
    }

    const platformRoot = path.join(
        "../",
        uniteConfig.dirs.packagedRoot,
        `/${packageJson.version}/${platformName.toLowerCase()}/`
    );

    const dest = wwwRootFolder ? path.join(platformRoot, wwwRootFolder) : platformRoot;

    let files = [
        {"src": path.join("./", "index.html")},
        {"src": path.join(uniteConfig.dirs.www.dist, "**/*")},
        {"src": path.join(uniteConfig.dirs.www.cssDist, "**/*")},
        {"src": path.join(uniteConfig.dirs.www.assets, "**/*")},
        {"src": path.join(uniteConfig.dirs.www.assetsSrc, "root/**/*"), dest}
    ];

    const packageFiles = clientPackages.getDistFiles(
        uniteConfig,
        ["app", "both"],
        buildConfiguration.bundle,
        buildConfiguration.minify
    );
    Object.keys(packageFiles).forEach((key) => {
        files = files.concat({"src": packageFiles[key]});
    });

    files = files.concat(clientPackages.getAssets(uniteConfig).map(a => {
        return {"src": a};
    }));

    display.info("Gathering Files", platformName);
    display.info("Destination", dest);

    for (let i = 0; i < files.length; i++) {
        const fileDest = files[i].dest ? files[i].dest
            : path.join(
                dest,
                files[i].src.indexOf("**") > 0
                    ? files[i].src.replace(/\*\*[/\\]\*(.*)/, "") : path.dirname(files[i].src)
            );

        display.info("Copying Files", files[i].src);
        display.info("To", fileDest);

        await asyncUtil.stream(gulp.src(files[i].src, {"dot": true})
            .pipe(gulp.dest(fileDest)));
    }

    return platformRoot;
}

function getConfig (uniteConfig, platformName) {
    if (uniteConfig.platforms &&
        uniteConfig.platforms[platformName]) {
        return uniteConfig.platforms[platformName];
    } else {
        return {};
    }
}

module.exports = {
    gatherFiles,
    getConfig
};


/* Generated by UniteJS */
