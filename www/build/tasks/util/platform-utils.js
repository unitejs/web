/**
 * Gulp utilities for platform.
 */
const display = require("./display");
const uc = require("./unite-config");
const gulp = require("gulp");
const path = require("path");
const clientPackages = require("./client-packages");
const asyncUtil = require("./async-util");
const packageConfig = require("./package-config");

async function gatherFiles (platformName) {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig);
    const packageJson = await packageConfig.getPackageJson();

    const bundleExists = await asyncUtil.fileExists(path.join(uniteConfig.dirs.www.dist, "app-bundle.js"));
    if (buildConfiguration.bundle && !bundleExists) {
        display.error(`You have specified configuration '${buildConfiguration.variables.name}' which is bundled,` +
                            " but the dist folder contains a non bundled build.");
        process.exit(1);
    } else if (!buildConfiguration.bundle && bundleExists) {
        display.error(`You have specified configuration '${buildConfiguration.variables.name}' which is not bundled,` +
                            " but the dist folder contains a bundled build.");
        process.exit(1);
    }

    let files = [
        path.join("./", "index.html"),
        path.join(uniteConfig.dirs.www.dist, "**/*"),
        path.join(uniteConfig.dirs.www.cssDist, "**/*"),
        path.join(uniteConfig.dirs.www.assets, "**/*")
    ];

    const packageFiles = clientPackages.getDistFiles(uniteConfig,
        ["app", "both"],
        buildConfiguration.bundle,
        buildConfiguration.minify);
    Object.keys(packageFiles).forEach((key) => {
        files = files.concat(packageFiles[key]);
    });

    files = files.concat(clientPackages.getAssets(uniteConfig));

    const dest = path.join("../",
        uniteConfig.dirs.packagedRoot,
        `/${packageJson.version}/${platformName.toLowerCase()}/`);

    display.info("Gathering Files", platformName);
    display.info("Destination", dest);

    for (let i = 0; i < files.length; i++) {
        const fileDest = path.join(dest,
            files[i].indexOf("**") > 0 ? files[i].replace(/\*\*[/\\]\*(.*)/, "") : path.dirname(files[i]));

        display.info("Copying Files", files[i]);
        display.info("To", fileDest);

        await asyncUtil.stream(gulp.src(files[i])
            .pipe(gulp.dest(fileDest)));
    }

    return dest;
}

function getConfig (uniteConfig, platformName) {
    if (uniteConfig.platforms &&
        uniteConfig.platforms[platformName]) {
        return uniteConfig.platforms[platformName];
    } else {
        return {};
    }
}

module.exports = {
    gatherFiles,
    getConfig
};


/* Generated by UniteJS */
