/**
 * Gulp tasks for bundling RequireJS modules.
 */
const fs = require("fs");
const gulp = require("gulp");
const path = require("path");
const requireJs = require("requirejs");
const util = require("util");
const clientPackages = require("./util/client-packages");
const display = require("./util/display");
const uc = require("./util/unite-config");
async function performVendorOptimize(uniteConfig, buildConfiguration, modulesConfig) {
    return new Promise((resolve, reject) => {
        try {
            requireJs.optimize({
                baseUrl: uniteConfig.dirs.www.dist,
                generateSourceMaps: buildConfiguration.sourcemaps,
                logLevel: 2,
                name: "vendor-bundle-init",
                optimize: buildConfiguration.minify ? "uglify" : "none",
                out: path.join(uniteConfig.dirs.www.dist, "vendor-bundle.js"),
                paths: modulesConfig.paths,
                packages: modulesConfig.packages
            }, async (result) => {
                display.log(result);
                resolve();
            }, async (err) => {
                reject(err);
            });
        } catch (err) {
            reject(err);
        }
    });
}
gulp.task("build-bundle-vendor", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, false);
    if (buildConfiguration.bundle) {
        display.info("Running", "Require js optimizer for Vendor");
        const modulesConfig = clientPackages.buildModuleConfig(uniteConfig, ["app", "both"], buildConfiguration.minify);
        const keys = [];
        if (modulesConfig.paths.requirejs) {
            modulesConfig.paths.requireLib = modulesConfig.paths.requirejs;
            delete modulesConfig.paths.requirejs;
        }
        for (const key in modulesConfig.paths) {
            modulesConfig.paths[key] = modulesConfig.paths[key].replace(/.\//, "");
            modulesConfig.paths[key] = `../${modulesConfig.paths[key].replace(/(\.js)$/, "")}`;
            keys.push(key);
        }
        modulesConfig.packages.forEach(pkg => {
            pkg.location = `../${pkg.location}`;
            keys.push(pkg.name);
        });
        try {
            await util.promisify(fs.writeFile)(path.join(uniteConfig.dirs.www.dist, "vendor-bundle-init.js"), `define(${JSON.stringify(keys)}, function () {});`);
            await performVendorOptimize(uniteConfig, buildConfiguration, modulesConfig);
        } catch (err) {
            display.error("Creating vendor bundle", err);
            process.exit(1);
        }
    }
});
// Generated by UniteJS
