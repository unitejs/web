define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Scroll class.
     */
    var Scroll = /** @class */ (function () {
        function Scroll() {
        }
        Scroll.getOffset = function (element) {
            if (element) {
                if (element instanceof Window) {
                    return { x: element.scrollX | element.pageXOffset, y: element.scrollY | element.pageYOffset };
                }
                else {
                    return { x: element.scrollLeft, y: element.scrollTop };
                }
            }
            else {
                return undefined;
            }
        };
        Scroll.smoothScroll = function (element, x, y) {
            if (element) {
                if (element instanceof Window) {
                    Scroll.step(element, Scroll.now(), element.scrollX | element.pageXOffset, element.scrollY | element.pageYOffset, x, y);
                }
                else {
                    Scroll.step(element, Scroll.now(), element.scrollLeft, element.scrollTop, x, y);
                }
            }
        };
        Scroll.step = function (element, startTime, startX, startY, x, y) {
            var time = this.now();
            var elapsed = (time - startTime) / 468;
            elapsed = elapsed > 1 ? 1 : elapsed;
            var value = this.ease(elapsed);
            var currentX = startX + (x - startX) * value;
            var currentY = startY + (y - startY) * value;
            element.scroll(currentX, currentY);
            if (currentX !== x || currentY !== y) {
                window.requestAnimationFrame(function () { return Scroll.step(element, startTime, startX, startY, x, y); });
            }
        };
        Scroll.now = function () {
            return window.performance && window.performance.now
                ? window.performance.now() : Date.now();
        };
        Scroll.ease = function (k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        };
        return Scroll;
    }());
    exports.Scroll = Scroll;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vc3JjL2RvbUhlbHBlcnMvc2Nyb2xsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUFBOztPQUVHO0lBQ0g7UUFBQTtRQXdEQSxDQUFDO1FBdkRpQixnQkFBUyxHQUF2QixVQUF3QixPQUE2QjtZQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsQ0FBQyxDQUFDLE9BQU8sWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbEcsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzRCxDQUFDO1lBQ0wsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUM7UUFFYSxtQkFBWSxHQUExQixVQUEyQixPQUE2QixFQUFFLENBQVMsRUFBRSxDQUFTO1lBQzFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxDQUFDLENBQUMsT0FBTyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFDN0IsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxFQUNyQyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNwRixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFFYyxXQUFJLEdBQW5CLFVBQW9CLE9BQTZCLEVBQzdCLFNBQWlCLEVBQ2pCLE1BQWMsRUFDZCxNQUFjLEVBQ2QsQ0FBUyxFQUNULENBQVM7WUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3hCLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUV2QyxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO1lBRXBDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakMsSUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUMvQyxJQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBRS9DLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRW5DLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxjQUFNLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFyRCxDQUFxRCxDQUFDLENBQUM7WUFDOUYsQ0FBQztRQUNMLENBQUM7UUFFYyxVQUFHLEdBQWxCO1lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHO2tCQUM3QyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoRCxDQUFDO1FBRWMsV0FBSSxHQUFuQixVQUFvQixDQUFTO1lBQ3pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUNMLGFBQUM7SUFBRCxDQXhEQSxBQXdEQyxJQUFBO0lBeERZLHdCQUFNIiwiZmlsZSI6ImRvbUhlbHBlcnMvc2Nyb2xsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTY3JvbGwgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGwge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0T2Zmc2V0KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgV2luZG93KTogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9IHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgV2luZG93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogZWxlbWVudC5zY3JvbGxYIHwgZWxlbWVudC5wYWdlWE9mZnNldCwgeTogZWxlbWVudC5zY3JvbGxZIHwgZWxlbWVudC5wYWdlWU9mZnNldCB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB4OiBlbGVtZW50LnNjcm9sbExlZnQsIHk6IGVsZW1lbnQuc2Nyb2xsVG9wIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzbW9vdGhTY3JvbGwoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBXaW5kb3csIHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFdpbmRvdykge1xuICAgICAgICAgICAgICAgIFNjcm9sbC5zdGVwKGVsZW1lbnQsIFNjcm9sbC5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxYIHwgZWxlbWVudC5wYWdlWE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxZIHwgZWxlbWVudC5wYWdlWU9mZnNldCwgeCwgeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFNjcm9sbC5zdGVwKGVsZW1lbnQsIFNjcm9sbC5ub3coKSwgZWxlbWVudC5zY3JvbGxMZWZ0LCBlbGVtZW50LnNjcm9sbFRvcCwgeCwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBzdGVwKGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgV2luZG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0WTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLm5vdygpO1xuICAgICAgICBsZXQgZWxhcHNlZCA9ICh0aW1lIC0gc3RhcnRUaW1lKSAvIDQ2ODtcblxuICAgICAgICBlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZWFzZShlbGFwc2VkKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50WCA9IHN0YXJ0WCArICh4IC0gc3RhcnRYKSAqIHZhbHVlO1xuICAgICAgICBjb25zdCBjdXJyZW50WSA9IHN0YXJ0WSArICh5IC0gc3RhcnRZKSAqIHZhbHVlO1xuXG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsKGN1cnJlbnRYLCBjdXJyZW50WSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRYICE9PSB4IHx8IGN1cnJlbnRZICE9PSB5KSB7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IFNjcm9sbC5zdGVwKGVsZW1lbnQsIHN0YXJ0VGltZSwgc3RhcnRYLCBzdGFydFksIHgsIHkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIG5vdygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3dcbiAgICAgICAgICAgID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogRGF0ZS5ub3coKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBlYXNlKGs6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
