define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Scroll class.
     */
    var Scroll = /** @class */ (function () {
        function Scroll() {
        }
        Scroll.getOffset = function (element) {
            if (element) {
                if (element instanceof Window) {
                    return { x: element.scrollX | element.pageXOffset, y: element.scrollY | element.pageYOffset };
                }
                else {
                    return { x: element.scrollLeft, y: element.scrollTop };
                }
            }
            else {
                return undefined;
            }
        };
        Scroll.smoothScroll = function (element, x, y) {
            if (element) {
                if (element instanceof Window) {
                    Scroll.step(element, Scroll.now(), element.scrollX | element.pageXOffset, element.scrollY | element.pageYOffset, x, y);
                }
                else {
                    Scroll.step(element, Scroll.now(), element.scrollLeft, element.scrollTop, x, y);
                }
            }
        };
        Scroll.step = function (element, startTime, startX, startY, x, y) {
            var time = this.now();
            var elapsed = (time - startTime) / 468;
            elapsed = elapsed > 1 ? 1 : elapsed;
            var value = this.ease(elapsed);
            var currentX = startX + (x - startX) * value;
            var currentY = startY + (y - startY) * value;
            element.scroll(currentX, currentY);
            if (currentX !== x || currentY !== y) {
                window.requestAnimationFrame(function () { return Scroll.step(element, startTime, startX, startY, x, y); });
            }
        };
        Scroll.now = function () {
            return window.performance && window.performance.now
                ? window.performance.now() : Date.now();
        };
        Scroll.ease = function (k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        };
        return Scroll;
    }());
    exports.Scroll = Scroll;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vc3JjL2RvbUhlbHBlcnMvc2Nyb2xsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUFBOztPQUVHO0lBQ0g7UUFBQTtRQXdEQSxDQUFDO1FBdkRpQixnQkFBUyxHQUF2QixVQUF3QixPQUE2QjtZQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsQ0FBQyxDQUFDLE9BQU8sWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbEcsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzRCxDQUFDO1lBQ0wsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUM7UUFFYSxtQkFBWSxHQUExQixVQUEyQixPQUE2QixFQUFFLENBQVMsRUFBRSxDQUFTO1lBQzFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxDQUFDLENBQUMsT0FBTyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFDN0IsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxFQUNyQyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNwRixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFFYyxXQUFJLEdBQW5CLFVBQW9CLE9BQTZCLEVBQzdCLFNBQWlCLEVBQ2pCLE1BQWMsRUFDZCxNQUFjLEVBQ2QsQ0FBUyxFQUNULENBQVM7WUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3hCLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUV2QyxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFcEMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVqQyxJQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQy9DLElBQU0sUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7WUFFL0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFbkMsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLGNBQU0sT0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQXJELENBQXFELENBQUMsQ0FBQztZQUM5RixDQUFDO1FBQ0wsQ0FBQztRQUVjLFVBQUcsR0FBbEI7WUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUc7Z0JBQy9DLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEQsQ0FBQztRQUVjLFdBQUksR0FBbkIsVUFBb0IsQ0FBUztZQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDTCxhQUFDO0lBQUQsQ0F4REEsQUF3REMsSUFBQTtJQXhEWSx3QkFBTSIsImZpbGUiOiJkb21IZWxwZXJzL3Njcm9sbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2Nyb2xsIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgU2Nyb2xsIHtcbiAgICBwdWJsaWMgc3RhdGljIGdldE9mZnNldChlbGVtZW50OiBIVE1MRWxlbWVudCB8IFdpbmRvdyk6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFdpbmRvdykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IGVsZW1lbnQuc2Nyb2xsWCB8IGVsZW1lbnQucGFnZVhPZmZzZXQsIHk6IGVsZW1lbnQuc2Nyb2xsWSB8IGVsZW1lbnQucGFnZVlPZmZzZXQgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogZWxlbWVudC5zY3JvbGxMZWZ0LCB5OiBlbGVtZW50LnNjcm9sbFRvcCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc21vb3RoU2Nyb2xsKGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgV2luZG93LCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICBTY3JvbGwuc3RlcChlbGVtZW50LCBTY3JvbGwubm93KCksXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsWCB8IGVsZW1lbnQucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsWSB8IGVsZW1lbnQucGFnZVlPZmZzZXQsIHgsIHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBTY3JvbGwuc3RlcChlbGVtZW50LCBTY3JvbGwubm93KCksIGVsZW1lbnQuc2Nyb2xsTGVmdCwgZWxlbWVudC5zY3JvbGxUb3AsIHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgc3RlcChlbGVtZW50OiBIVE1MRWxlbWVudCB8IFdpbmRvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRYOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFk6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCB0aW1lID0gdGhpcy5ub3coKTtcbiAgICAgICAgbGV0IGVsYXBzZWQgPSAodGltZSAtIHN0YXJ0VGltZSkgLyA0Njg7XG5cbiAgICAgICAgZWxhcHNlZCA9IGVsYXBzZWQgPiAxID8gMSA6IGVsYXBzZWQ7XG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmVhc2UoZWxhcHNlZCk7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFggPSBzdGFydFggKyAoeCAtIHN0YXJ0WCkgKiB2YWx1ZTtcbiAgICAgICAgY29uc3QgY3VycmVudFkgPSBzdGFydFkgKyAoeSAtIHN0YXJ0WSkgKiB2YWx1ZTtcblxuICAgICAgICBlbGVtZW50LnNjcm9sbChjdXJyZW50WCwgY3VycmVudFkpO1xuXG4gICAgICAgIGlmIChjdXJyZW50WCAhPT0geCB8fCBjdXJyZW50WSAhPT0geSkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBTY3JvbGwuc3RlcChlbGVtZW50LCBzdGFydFRpbWUsIHN0YXJ0WCwgc3RhcnRZLCB4LCB5KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBub3coKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gICAgICAgICAgICA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6IERhdGUubm93KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZWFzZShrOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
