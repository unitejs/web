define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Scroll class.
     */
    var Scroll = /** @class */ (function () {
        function Scroll() {
        }
        Scroll.getOffset = function (element) {
            if (element instanceof Window) {
                return { x: element.scrollX | element.pageXOffset, y: element.scrollY | element.pageYOffset };
            }
            else {
                return { x: element.scrollLeft, y: element.scrollTop };
            }
        };
        Scroll.smoothScroll = function (element, x, y) {
            if (element instanceof Window) {
                Scroll.step(element, Scroll.now(), element.scrollX | element.pageXOffset, element.scrollY | element.pageYOffset, x, y);
            }
            else {
                Scroll.step(element, Scroll.now(), element.scrollLeft, element.scrollTop, x, y);
            }
        };
        Scroll.step = function (element, startTime, startX, startY, x, y) {
            var time = this.now();
            var elapsed = (time - startTime) / 468;
            elapsed = elapsed > 1 ? 1 : elapsed;
            var value = this.ease(elapsed);
            var currentX = startX + (x - startX) * value;
            var currentY = startY + (y - startY) * value;
            element.scroll(currentX, currentY);
            if (currentX !== x || currentY !== y) {
                window.requestAnimationFrame(function () { return Scroll.step(element, startTime, startX, startY, x, y); });
            }
        };
        Scroll.now = function () {
            return window.performance && window.performance.now
                ? window.performance.now() : Date.now();
        };
        Scroll.ease = function (k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        };
        return Scroll;
    }());
    exports.Scroll = Scroll;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4vc3JjL2RvbUhlbHBlcnMvc2Nyb2xsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUFBOztPQUVHO0lBQ0g7UUFBQTtRQWtEQSxDQUFDO1FBakRpQixnQkFBUyxHQUF2QixVQUF3QixPQUE2QjtZQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDNUIsTUFBTSxDQUFDLEVBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakcsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxFQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDMUQsQ0FBQztRQUNMLENBQUM7UUFFYSxtQkFBWSxHQUExQixVQUEyQixPQUE2QixFQUFFLENBQVMsRUFBRSxDQUFTO1lBQzFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQzdCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFDckMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEYsQ0FBQztRQUNMLENBQUM7UUFFYyxXQUFJLEdBQW5CLFVBQW9CLE9BQTZCLEVBQzdCLFNBQWlCLEVBQ2pCLE1BQWMsRUFDZCxNQUFjLEVBQ2QsQ0FBUyxFQUNULENBQVM7WUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3hCLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUV2QyxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO1lBRXBDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakMsSUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUMvQyxJQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBRS9DLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRW5DLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxjQUFNLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFyRCxDQUFxRCxDQUFDLENBQUM7WUFDOUYsQ0FBQztRQUNMLENBQUM7UUFFYyxVQUFHLEdBQWxCO1lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHO2tCQUM3QyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoRCxDQUFDO1FBRWMsV0FBSSxHQUFuQixVQUFvQixDQUFTO1lBQ3pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUNMLGFBQUM7SUFBRCxDQWxEQSxBQWtEQyxJQUFBO0lBbERZLHdCQUFNIiwiZmlsZSI6ImRvbUhlbHBlcnMvc2Nyb2xsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTY3JvbGwgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGwge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0T2Zmc2V0KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgV2luZG93KTogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9IHtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBXaW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiB7eDogZWxlbWVudC5zY3JvbGxYIHwgZWxlbWVudC5wYWdlWE9mZnNldCwgeTogZWxlbWVudC5zY3JvbGxZIHwgZWxlbWVudC5wYWdlWU9mZnNldCB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHt4OiBlbGVtZW50LnNjcm9sbExlZnQsIHk6IGVsZW1lbnQuc2Nyb2xsVG9wIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNtb290aFNjcm9sbChlbGVtZW50OiBIVE1MRWxlbWVudCB8IFdpbmRvdywgeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBXaW5kb3cpIHtcbiAgICAgICAgICAgIFNjcm9sbC5zdGVwKGVsZW1lbnQsIFNjcm9sbC5ub3coKSxcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNjcm9sbFggfCBlbGVtZW50LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsWSB8IGVsZW1lbnQucGFnZVlPZmZzZXQsIHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgU2Nyb2xsLnN0ZXAoZWxlbWVudCwgU2Nyb2xsLm5vdygpLCBlbGVtZW50LnNjcm9sbExlZnQsIGVsZW1lbnQuc2Nyb2xsVG9wLCB4LCB5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHN0ZXAoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBXaW5kb3csXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0WDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRZOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHRoaXMubm93KCk7XG4gICAgICAgIGxldCBlbGFwc2VkID0gKHRpbWUgLSBzdGFydFRpbWUpIC8gNDY4O1xuXG4gICAgICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5lYXNlKGVsYXBzZWQpO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRYID0gc3RhcnRYICsgKHggLSBzdGFydFgpICogdmFsdWU7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRZID0gc3RhcnRZICsgKHkgLSBzdGFydFkpICogdmFsdWU7XG5cbiAgICAgICAgZWxlbWVudC5zY3JvbGwoY3VycmVudFgsIGN1cnJlbnRZKTtcblxuICAgICAgICBpZiAoY3VycmVudFggIT09IHggfHwgY3VycmVudFkgIT09IHkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gU2Nyb2xsLnN0ZXAoZWxlbWVudCwgc3RhcnRUaW1lLCBzdGFydFgsIHN0YXJ0WSwgeCwgeSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgbm93KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICAgICAgICAgICAgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiBEYXRlLm5vdygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGVhc2UoazogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
